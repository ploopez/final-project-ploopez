name: Execute Kubectl apply
# cd
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
    - 'aplicativo/aplicativoNuevo/**'
    - 'kubernetes/**'

jobs:
  k8s:
    name: 'Azure Kubernetes Service Deployment'
    runs-on: ubuntu-latest
    environment: production

    outputs:
      tag: ${{ steps.get_version.outputs.version }}
      
    defaults:
      run:
        shell: bash
        
    steps:

    - name: Checkout
      uses: actions/checkout@v4
        
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Extract Version from composer.json
      id: get_version
      run: |
          VERSION=$(jq -r '.version' aplicativo/aplicativoNuevo/composer.json)
          if [ -z "$VERSION" ]; then
            echo "No se pudo obtener la versiÃ³n desde docker-compose.json"
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      
        
    - name: Connection to cluster
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        (echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/runner/.bashrc
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        sudo apt-get install build-essential
        brew install Azure/kubelogin/kubelogin
        az account set --subscription 86f76907-b9d5-46fa-a39d-aff8432a1868
        az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP_NAME }} --name ${{ vars.KUBERNETES_CLUSTER_NAME }} --overwrite-existing
        kubelogin convert-kubeconfig -l azurecli
        kubectl apply -f kubernetes/. -n ns-plopez
        kubectl set image deployment/proyectofinal acrplopez=acrplopezfp2.azurecr.io/app-plopez:${{ env.VERSION }} -n ns-plopez
        kubectl describe svc proyectofinal-service -n ns-plopez
        kubectl get service ingress-nginx-controller --namespace=ingress-nginx


